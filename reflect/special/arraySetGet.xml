
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.oracle.com/java-tutorial.dtd"
[
<!ATTLIST html
xmlns:xsi CDATA #FIXED "http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation CDATA #IMPLIED
>
]> 
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>leave this as is</title>
</head>
<body>

<p>Just as in non-reflective code, an array field may be set or retrieved in its entirety or component by component. To set the entire array at once, use 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>java.lang.reflect.Field.set(Object obj, Object value)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Field.html#set-java.lang.Object-java.lang.Object-
)
</macroinline>
. To retrieve the entire array, use 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Field.get(Object)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Field.html#get-java.lang.Object-
)
</macroinline>
. Individual components can be set or retrieved using methods in 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>java.lang.reflect.Array</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html
)
</macroinline>
.</p>
<p>
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html
)
</macroinline>
 provides methods of the form <code>set<em>Foo</em>()</code> and <code>get<em>Foo</em>()</code> for setting and getting components of any primitive type. For example, the component of an <code>int</code> array may be set with 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.setInt(Object array, int index, int value)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#setInt-java.lang.Objectint-int-
)
</macroinline>
 and may be retrieved with 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.getInt(Object array, int index)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#getInt-java.lang.Object-int-
)
</macroinline>
.</p>
<p>These methods support automatic <em>widening</em> of data types. Therefore, 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.getShort()</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#getShort-java.lang.Object-int-
)
</macroinline>
 may be used to set the values of an <code>int</code> array since a 16-bit <code>short</code> may be widened to a 32-bit <code>int</code> without loss of data; on the other hand, invoking 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.setLong()</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#setLong-java.lang.Object-int-long-
)
</macroinline>
 on an array of <code>int</code> will cause an 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>IllegalArgumentException</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/IllegalArgumentException.html
)
</macroinline>
 to be thrown because a 64-bit <code>long</code> can not be narrowed to for storage in a 32-bit <code>int</code> with out loss of information. This is true regardless of whether the actual values being passed could be accurately represented in the target data type. <a href="https://docs.oracle.com/javase/specs/jls/se7/html/index.html"><em>The Java Language Specification, Java SE 7 Edition</em></a>, sections <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2">Widening Primitive Conversion</a> and <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3">Narrowing Primitive Conversion</a> contains a complete discussion of widening and narrowing conversions.</p>
<p>The components of arrays of reference types (including arrays of arrays) are set and retrieved using 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.set(Object array, int index, int value)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#set-java.lang.Object-int-int-
)
</macroinline>
 and  
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.get(Object array, int index)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#get-java.lang.Object-int-
)
</macroinline>
.</p>
<h2>Setting a Field of Type Array</h2>
<p>The 
<macroinline>
#usemacro SOURCELINK (
  LINKFILE example/GrowBufferedReader.java
  LINKTEXT <code>GrowBufferedReader</code>
)
</macroinline>
 example illustrates how to replace the value of a field of type array. In this case, the code replaces the backing array for a 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>java.io.BufferedReader</code>
    LINKFILE $LATESTAPIDOCHOME/java/io/BufferedReader.html
)
</macroinline>
 with a larger one. (This assumes that the creation of the original <code>BufferedReader</code> is in code that is not modifiable; otherwise, it would be trivial to simply use the alternate constructor 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>BufferedReader(java.io.Reader in, int size)</code>
    LINKFILE $LATESTAPIDOCHOME/java/io/BufferedReader.html#BufferedReader-java.io.Reader-int-
)
</macroinline>
 which accepts an input buffer size.)</p>
<macroblock>
$BEGINCODE
<macroblock>
#includejava example/GrowBufferedReader.java
</macroblock>
$ENDCODE
</macroblock>
<macroblock>
$BEGINCODE
&#36; <em>java GrowBufferedReader grow</em>
Using new backing array, size=16384
&#36; <em>java GrowBufferedReader</em>
Using original backing array, size=8192
$ENDCODE
</macroblock>
<p>Note that the above example makes use of the array utility method 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>java.util.Arrays.copyOf)</code>
    LINKFILE $LATESTAPIDOCHOME/java/util/Arrays.html#copyOf-char:A-int-
)
</macroinline>
. 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>java.util.Arrays</code>
    LINKFILE $LATESTAPIDOCHOME/java/util/Arrays.html
)
</macroinline>
 contains many methods which are convenient when operating on arrays.</p>
<h2>Accessing Elements of a Multidimensional Array</h2>
<p>Multi-dimensional arrays are simply nested arrays. A two-dimensional array is an array of arrays. A three-dimensional array is an array of two-dimensional arrays, and so on. The 
<macroinline>
#usemacro SOURCELINK (
  LINKFILE example/CreateMatrix.java
  LINKTEXT <code>CreateMatrix</code>
)
</macroinline>
 example illustrates how to create and initialize a multi-dimensional array using reflection.</p>
<macroblock>
$BEGINCODE
<macroblock>
#includejava example/CreateMatrix.java
</macroblock>
$ENDCODE
</macroblock>
<macroblock>
$BEGINCODE
&#36; <em>java CreateMatrix</em>
matrix[0][0] = 1
matrix[0][1] = 2
matrix[1][0] = 3
matrix[1][1] = 4
$ENDCODE
</macroblock>
<p>The same result could be obtained by using the following code fragment:</p>
<macroblock>
$BEGINCODE
Object matrix = Array.newInstance(int.class, 2);
Object row0 = Array.newInstance(int.class, 2);
Object row1 = Array.newInstance(int.class, 2);

Array.setInt(row0, 0, 1);
Array.setInt(row0, 1, 2);
Array.setInt(row1, 0, 3);
Array.setInt(row1, 1, 4);

Array.set(matrix, 0, row0);
Array.set(matrix, 1, row1);
$ENDCODE
</macroblock>
<p>The variable argument 
<macroinline>
#usemacro APILINK (
    LINKTEXT <code>Array.newInstance(Class&lt;?&gt; componentType, int... dimensions)</code>
    LINKFILE $LATESTAPIDOCHOME/java/lang/reflect/Array.html#newInstance-java.lang.Class-int...-
)
</macroinline>
 provides a convenient way to create multi-dimensional arrays, but the components still need to initialized using the principle that that multi-dimensional arrays are nested arrays. (Reflection does not provide multiple indexed <code>get</code>/<code>set</code> methods for this purpose.)</p>

</body>
</html>

